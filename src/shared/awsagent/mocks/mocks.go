// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go

// Package mock_awsagent is a generated GoMock package.
package mock_awsagent

import (
	context "context"
	reflect "reflect"

	iam "github.com/aws/aws-sdk-go-v2/service/iam"
	rolesanywhere "github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	gomock "go.uber.org/mock/gomock"
)

// MockIAMClient is a mock of IAMClient interface.
type MockIAMClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAMClientMockRecorder
}

// MockIAMClientMockRecorder is the mock recorder for MockIAMClient.
type MockIAMClientMockRecorder struct {
	mock *MockIAMClient
}

// NewMockIAMClient creates a new mock instance.
func NewMockIAMClient(ctrl *gomock.Controller) *MockIAMClient {
	mock := &MockIAMClient{ctrl: ctrl}
	mock.recorder = &MockIAMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAMClient) EXPECT() *MockIAMClientMockRecorder {
	return m.recorder
}

// AttachRolePolicy mocks base method.
func (m *MockIAMClient) AttachRolePolicy(ctx context.Context, i *iam.AttachRolePolicyInput, opts ...func(*iam.Options)) (*iam.AttachRolePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AttachRolePolicy", varargs...)
	ret0, _ := ret[0].(*iam.AttachRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachRolePolicy indicates an expected call of AttachRolePolicy.
func (mr *MockIAMClientMockRecorder) AttachRolePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachRolePolicy", reflect.TypeOf((*MockIAMClient)(nil).AttachRolePolicy), varargs...)
}

// CreatePolicy mocks base method.
func (m *MockIAMClient) CreatePolicy(ctx context.Context, i *iam.CreatePolicyInput, opts ...func(*iam.Options)) (*iam.CreatePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicy", varargs...)
	ret0, _ := ret[0].(*iam.CreatePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockIAMClientMockRecorder) CreatePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockIAMClient)(nil).CreatePolicy), varargs...)
}

// CreatePolicyVersion mocks base method.
func (m *MockIAMClient) CreatePolicyVersion(ctx context.Context, i *iam.CreatePolicyVersionInput, opts ...func(*iam.Options)) (*iam.CreatePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePolicyVersion", varargs...)
	ret0, _ := ret[0].(*iam.CreatePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicyVersion indicates an expected call of CreatePolicyVersion.
func (mr *MockIAMClientMockRecorder) CreatePolicyVersion(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicyVersion", reflect.TypeOf((*MockIAMClient)(nil).CreatePolicyVersion), varargs...)
}

// CreateRole mocks base method.
func (m *MockIAMClient) CreateRole(ctx context.Context, i *iam.CreateRoleInput, opts ...func(*iam.Options)) (*iam.CreateRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRole", varargs...)
	ret0, _ := ret[0].(*iam.CreateRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIAMClientMockRecorder) CreateRole(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIAMClient)(nil).CreateRole), varargs...)
}

// DeletePolicy mocks base method.
func (m *MockIAMClient) DeletePolicy(ctx context.Context, i *iam.DeletePolicyInput, opts ...func(*iam.Options)) (*iam.DeletePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicy", varargs...)
	ret0, _ := ret[0].(*iam.DeletePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockIAMClientMockRecorder) DeletePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockIAMClient)(nil).DeletePolicy), varargs...)
}

// DeletePolicyVersion mocks base method.
func (m *MockIAMClient) DeletePolicyVersion(ctx context.Context, i *iam.DeletePolicyVersionInput, opts ...func(*iam.Options)) (*iam.DeletePolicyVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePolicyVersion", varargs...)
	ret0, _ := ret[0].(*iam.DeletePolicyVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicyVersion indicates an expected call of DeletePolicyVersion.
func (mr *MockIAMClientMockRecorder) DeletePolicyVersion(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicyVersion", reflect.TypeOf((*MockIAMClient)(nil).DeletePolicyVersion), varargs...)
}

// DeleteRole mocks base method.
func (m *MockIAMClient) DeleteRole(ctx context.Context, i *iam.DeleteRoleInput, opts ...func(*iam.Options)) (*iam.DeleteRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRole", varargs...)
	ret0, _ := ret[0].(*iam.DeleteRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIAMClientMockRecorder) DeleteRole(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIAMClient)(nil).DeleteRole), varargs...)
}

// DetachRolePolicy mocks base method.
func (m *MockIAMClient) DetachRolePolicy(ctx context.Context, i *iam.DetachRolePolicyInput, opts ...func(*iam.Options)) (*iam.DetachRolePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DetachRolePolicy", varargs...)
	ret0, _ := ret[0].(*iam.DetachRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachRolePolicy indicates an expected call of DetachRolePolicy.
func (mr *MockIAMClientMockRecorder) DetachRolePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachRolePolicy", reflect.TypeOf((*MockIAMClient)(nil).DetachRolePolicy), varargs...)
}

// GetPolicy mocks base method.
func (m *MockIAMClient) GetPolicy(ctx context.Context, i *iam.GetPolicyInput, opts ...func(*iam.Options)) (*iam.GetPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPolicy", varargs...)
	ret0, _ := ret[0].(*iam.GetPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockIAMClientMockRecorder) GetPolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockIAMClient)(nil).GetPolicy), varargs...)
}

// GetRole mocks base method.
func (m *MockIAMClient) GetRole(ctx context.Context, i *iam.GetRoleInput, opts ...func(*iam.Options)) (*iam.GetRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRole", varargs...)
	ret0, _ := ret[0].(*iam.GetRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockIAMClientMockRecorder) GetRole(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIAMClient)(nil).GetRole), varargs...)
}

// ListAttachedRolePolicies mocks base method.
func (m *MockIAMClient) ListAttachedRolePolicies(ctx context.Context, i *iam.ListAttachedRolePoliciesInput, opts ...func(*iam.Options)) (*iam.ListAttachedRolePoliciesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAttachedRolePolicies", varargs...)
	ret0, _ := ret[0].(*iam.ListAttachedRolePoliciesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedRolePolicies indicates an expected call of ListAttachedRolePolicies.
func (mr *MockIAMClientMockRecorder) ListAttachedRolePolicies(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedRolePolicies", reflect.TypeOf((*MockIAMClient)(nil).ListAttachedRolePolicies), varargs...)
}

// ListEntitiesForPolicy mocks base method.
func (m *MockIAMClient) ListEntitiesForPolicy(ctx context.Context, i *iam.ListEntitiesForPolicyInput, opts ...func(*iam.Options)) (*iam.ListEntitiesForPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEntitiesForPolicy", varargs...)
	ret0, _ := ret[0].(*iam.ListEntitiesForPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntitiesForPolicy indicates an expected call of ListEntitiesForPolicy.
func (mr *MockIAMClientMockRecorder) ListEntitiesForPolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntitiesForPolicy", reflect.TypeOf((*MockIAMClient)(nil).ListEntitiesForPolicy), varargs...)
}

// ListPolicyVersions mocks base method.
func (m *MockIAMClient) ListPolicyVersions(ctx context.Context, i *iam.ListPolicyVersionsInput, opts ...func(*iam.Options)) (*iam.ListPolicyVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPolicyVersions", varargs...)
	ret0, _ := ret[0].(*iam.ListPolicyVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyVersions indicates an expected call of ListPolicyVersions.
func (mr *MockIAMClientMockRecorder) ListPolicyVersions(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyVersions", reflect.TypeOf((*MockIAMClient)(nil).ListPolicyVersions), varargs...)
}

// PutRolePolicy mocks base method.
func (m *MockIAMClient) PutRolePolicy(ctx context.Context, i *iam.PutRolePolicyInput, opts ...func(*iam.Options)) (*iam.PutRolePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRolePolicy", varargs...)
	ret0, _ := ret[0].(*iam.PutRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRolePolicy indicates an expected call of PutRolePolicy.
func (mr *MockIAMClientMockRecorder) PutRolePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRolePolicy", reflect.TypeOf((*MockIAMClient)(nil).PutRolePolicy), varargs...)
}

// TagPolicy mocks base method.
func (m *MockIAMClient) TagPolicy(ctx context.Context, i *iam.TagPolicyInput, opts ...func(*iam.Options)) (*iam.TagPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagPolicy", varargs...)
	ret0, _ := ret[0].(*iam.TagPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagPolicy indicates an expected call of TagPolicy.
func (mr *MockIAMClientMockRecorder) TagPolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagPolicy", reflect.TypeOf((*MockIAMClient)(nil).TagPolicy), varargs...)
}

// TagRole mocks base method.
func (m *MockIAMClient) TagRole(ctx context.Context, i *iam.TagRoleInput, opts ...func(*iam.Options)) (*iam.TagRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagRole", varargs...)
	ret0, _ := ret[0].(*iam.TagRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagRole indicates an expected call of TagRole.
func (mr *MockIAMClientMockRecorder) TagRole(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRole", reflect.TypeOf((*MockIAMClient)(nil).TagRole), varargs...)
}

// UntagPolicy mocks base method.
func (m *MockIAMClient) UntagPolicy(ctx context.Context, params *iam.UntagPolicyInput, optFns ...func(*iam.Options)) (*iam.UntagPolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagPolicy", varargs...)
	ret0, _ := ret[0].(*iam.UntagPolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagPolicy indicates an expected call of UntagPolicy.
func (mr *MockIAMClientMockRecorder) UntagPolicy(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagPolicy", reflect.TypeOf((*MockIAMClient)(nil).UntagPolicy), varargs...)
}

// UntagRole mocks base method.
func (m *MockIAMClient) UntagRole(ctx context.Context, params *iam.UntagRoleInput, optFns ...func(*iam.Options)) (*iam.UntagRoleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagRole", varargs...)
	ret0, _ := ret[0].(*iam.UntagRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagRole indicates an expected call of UntagRole.
func (mr *MockIAMClientMockRecorder) UntagRole(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagRole", reflect.TypeOf((*MockIAMClient)(nil).UntagRole), varargs...)
}

// UpdateAssumeRolePolicy mocks base method.
func (m *MockIAMClient) UpdateAssumeRolePolicy(ctx context.Context, i *iam.UpdateAssumeRolePolicyInput, opts ...func(*iam.Options)) (*iam.UpdateAssumeRolePolicyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAssumeRolePolicy", varargs...)
	ret0, _ := ret[0].(*iam.UpdateAssumeRolePolicyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssumeRolePolicy indicates an expected call of UpdateAssumeRolePolicy.
func (mr *MockIAMClientMockRecorder) UpdateAssumeRolePolicy(ctx, i interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssumeRolePolicy", reflect.TypeOf((*MockIAMClient)(nil).UpdateAssumeRolePolicy), varargs...)
}

// MockRolesAnywhereClient is a mock of RolesAnywhereClient interface.
type MockRolesAnywhereClient struct {
	ctrl     *gomock.Controller
	recorder *MockRolesAnywhereClientMockRecorder
}

// MockRolesAnywhereClientMockRecorder is the mock recorder for MockRolesAnywhereClient.
type MockRolesAnywhereClientMockRecorder struct {
	mock *MockRolesAnywhereClient
}

// NewMockRolesAnywhereClient creates a new mock instance.
func NewMockRolesAnywhereClient(ctrl *gomock.Controller) *MockRolesAnywhereClient {
	mock := &MockRolesAnywhereClient{ctrl: ctrl}
	mock.recorder = &MockRolesAnywhereClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolesAnywhereClient) EXPECT() *MockRolesAnywhereClientMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockRolesAnywhereClient) CreateProfile(ctx context.Context, params *rolesanywhere.CreateProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.CreateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockRolesAnywhereClientMockRecorder) CreateProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).CreateProfile), varargs...)
}

// CreateTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) CreateTrustAnchor(ctx context.Context, params *rolesanywhere.CreateTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.CreateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrustAnchor indicates an expected call of CreateTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) CreateTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).CreateTrustAnchor), varargs...)
}

// DeleteCrl mocks base method.
func (m *MockRolesAnywhereClient) DeleteCrl(ctx context.Context, params *rolesanywhere.DeleteCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCrl indicates an expected call of DeleteCrl.
func (mr *MockRolesAnywhereClientMockRecorder) DeleteCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DeleteCrl), varargs...)
}

// DeleteProfile mocks base method.
func (m *MockRolesAnywhereClient) DeleteProfile(ctx context.Context, params *rolesanywhere.DeleteProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockRolesAnywhereClientMockRecorder) DeleteProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DeleteProfile), varargs...)
}

// DeleteTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) DeleteTrustAnchor(ctx context.Context, params *rolesanywhere.DeleteTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DeleteTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTrustAnchor indicates an expected call of DeleteTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) DeleteTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DeleteTrustAnchor), varargs...)
}

// DisableCrl mocks base method.
func (m *MockRolesAnywhereClient) DisableCrl(ctx context.Context, params *rolesanywhere.DisableCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableCrl indicates an expected call of DisableCrl.
func (mr *MockRolesAnywhereClientMockRecorder) DisableCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DisableCrl), varargs...)
}

// DisableProfile mocks base method.
func (m *MockRolesAnywhereClient) DisableProfile(ctx context.Context, params *rolesanywhere.DisableProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableProfile indicates an expected call of DisableProfile.
func (mr *MockRolesAnywhereClientMockRecorder) DisableProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DisableProfile), varargs...)
}

// DisableTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) DisableTrustAnchor(ctx context.Context, params *rolesanywhere.DisableTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.DisableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableTrustAnchor indicates an expected call of DisableTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) DisableTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).DisableTrustAnchor), varargs...)
}

// EnableCrl mocks base method.
func (m *MockRolesAnywhereClient) EnableCrl(ctx context.Context, params *rolesanywhere.EnableCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableCrl indicates an expected call of EnableCrl.
func (mr *MockRolesAnywhereClientMockRecorder) EnableCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).EnableCrl), varargs...)
}

// EnableProfile mocks base method.
func (m *MockRolesAnywhereClient) EnableProfile(ctx context.Context, params *rolesanywhere.EnableProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableProfile indicates an expected call of EnableProfile.
func (mr *MockRolesAnywhereClientMockRecorder) EnableProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).EnableProfile), varargs...)
}

// EnableTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) EnableTrustAnchor(ctx context.Context, params *rolesanywhere.EnableTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.EnableTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTrustAnchor indicates an expected call of EnableTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) EnableTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).EnableTrustAnchor), varargs...)
}

// GetCrl mocks base method.
func (m *MockRolesAnywhereClient) GetCrl(ctx context.Context, params *rolesanywhere.GetCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrl indicates an expected call of GetCrl.
func (mr *MockRolesAnywhereClientMockRecorder) GetCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).GetCrl), varargs...)
}

// GetProfile mocks base method.
func (m *MockRolesAnywhereClient) GetProfile(ctx context.Context, params *rolesanywhere.GetProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRolesAnywhereClientMockRecorder) GetProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).GetProfile), varargs...)
}

// GetSubject mocks base method.
func (m *MockRolesAnywhereClient) GetSubject(ctx context.Context, params *rolesanywhere.GetSubjectInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetSubjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSubject", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetSubjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockRolesAnywhereClientMockRecorder) GetSubject(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockRolesAnywhereClient)(nil).GetSubject), varargs...)
}

// GetTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) GetTrustAnchor(ctx context.Context, params *rolesanywhere.GetTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.GetTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustAnchor indicates an expected call of GetTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) GetTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).GetTrustAnchor), varargs...)
}

// ImportCrl mocks base method.
func (m *MockRolesAnywhereClient) ImportCrl(ctx context.Context, params *rolesanywhere.ImportCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ImportCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ImportCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCrl indicates an expected call of ImportCrl.
func (mr *MockRolesAnywhereClientMockRecorder) ImportCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ImportCrl), varargs...)
}

// ListCrls mocks base method.
func (m *MockRolesAnywhereClient) ListCrls(ctx context.Context, params *rolesanywhere.ListCrlsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListCrlsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCrls", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListCrlsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCrls indicates an expected call of ListCrls.
func (mr *MockRolesAnywhereClientMockRecorder) ListCrls(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrls", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ListCrls), varargs...)
}

// ListProfiles mocks base method.
func (m *MockRolesAnywhereClient) ListProfiles(ctx context.Context, params *rolesanywhere.ListProfilesInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListProfilesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProfiles", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListProfilesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfiles indicates an expected call of ListProfiles.
func (mr *MockRolesAnywhereClientMockRecorder) ListProfiles(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfiles", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ListProfiles), varargs...)
}

// ListSubjects mocks base method.
func (m *MockRolesAnywhereClient) ListSubjects(ctx context.Context, params *rolesanywhere.ListSubjectsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListSubjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubjects", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListSubjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubjects indicates an expected call of ListSubjects.
func (mr *MockRolesAnywhereClientMockRecorder) ListSubjects(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubjects", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ListSubjects), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockRolesAnywhereClient) ListTagsForResource(ctx context.Context, params *rolesanywhere.ListTagsForResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockRolesAnywhereClientMockRecorder) ListTagsForResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ListTagsForResource), varargs...)
}

// ListTrustAnchors mocks base method.
func (m *MockRolesAnywhereClient) ListTrustAnchors(ctx context.Context, params *rolesanywhere.ListTrustAnchorsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTrustAnchorsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTrustAnchors", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ListTrustAnchorsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTrustAnchors indicates an expected call of ListTrustAnchors.
func (mr *MockRolesAnywhereClientMockRecorder) ListTrustAnchors(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTrustAnchors", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ListTrustAnchors), varargs...)
}

// Options mocks base method.
func (m *MockRolesAnywhereClient) Options() rolesanywhere.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options")
	ret0, _ := ret[0].(rolesanywhere.Options)
	return ret0
}

// Options indicates an expected call of Options.
func (mr *MockRolesAnywhereClientMockRecorder) Options() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockRolesAnywhereClient)(nil).Options))
}

// PutNotificationSettings mocks base method.
func (m *MockRolesAnywhereClient) PutNotificationSettings(ctx context.Context, params *rolesanywhere.PutNotificationSettingsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.PutNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutNotificationSettings", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.PutNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutNotificationSettings indicates an expected call of PutNotificationSettings.
func (mr *MockRolesAnywhereClientMockRecorder) PutNotificationSettings(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutNotificationSettings", reflect.TypeOf((*MockRolesAnywhereClient)(nil).PutNotificationSettings), varargs...)
}

// ResetNotificationSettings mocks base method.
func (m *MockRolesAnywhereClient) ResetNotificationSettings(ctx context.Context, params *rolesanywhere.ResetNotificationSettingsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ResetNotificationSettingsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetNotificationSettings", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.ResetNotificationSettingsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetNotificationSettings indicates an expected call of ResetNotificationSettings.
func (mr *MockRolesAnywhereClientMockRecorder) ResetNotificationSettings(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetNotificationSettings", reflect.TypeOf((*MockRolesAnywhereClient)(nil).ResetNotificationSettings), varargs...)
}

// TagResource mocks base method.
func (m *MockRolesAnywhereClient) TagResource(ctx context.Context, params *rolesanywhere.TagResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockRolesAnywhereClientMockRecorder) TagResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockRolesAnywhereClient)(nil).TagResource), varargs...)
}

// UntagResource mocks base method.
func (m *MockRolesAnywhereClient) UntagResource(ctx context.Context, params *rolesanywhere.UntagResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UntagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntagResource", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UntagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagResource indicates an expected call of UntagResource.
func (mr *MockRolesAnywhereClientMockRecorder) UntagResource(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagResource", reflect.TypeOf((*MockRolesAnywhereClient)(nil).UntagResource), varargs...)
}

// UpdateCrl mocks base method.
func (m *MockRolesAnywhereClient) UpdateCrl(ctx context.Context, params *rolesanywhere.UpdateCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateCrlOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCrl", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateCrlOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCrl indicates an expected call of UpdateCrl.
func (mr *MockRolesAnywhereClientMockRecorder) UpdateCrl(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrl", reflect.TypeOf((*MockRolesAnywhereClient)(nil).UpdateCrl), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockRolesAnywhereClient) UpdateProfile(ctx context.Context, params *rolesanywhere.UpdateProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateProfileOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockRolesAnywhereClientMockRecorder) UpdateProfile(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRolesAnywhereClient)(nil).UpdateProfile), varargs...)
}

// UpdateTrustAnchor mocks base method.
func (m *MockRolesAnywhereClient) UpdateTrustAnchor(ctx context.Context, params *rolesanywhere.UpdateTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateTrustAnchorOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTrustAnchor", varargs...)
	ret0, _ := ret[0].(*rolesanywhere.UpdateTrustAnchorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrustAnchor indicates an expected call of UpdateTrustAnchor.
func (mr *MockRolesAnywhereClientMockRecorder) UpdateTrustAnchor(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrustAnchor", reflect.TypeOf((*MockRolesAnywhereClient)(nil).UpdateTrustAnchor), varargs...)
}
