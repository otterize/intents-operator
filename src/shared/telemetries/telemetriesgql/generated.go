// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package telemetriesgql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type Component struct {
	ComponentType       TelemetryComponentType `json:"componentType"`
	ComponentInstanceId string                 `json:"componentInstanceId"`
	ContextId           string                 `json:"contextId"`
	Version             string                 `json:"version"`
	CloudClientId       string                 `json:"cloudClientId"`
}

// GetComponentType returns Component.ComponentType, and is useful for accessing the field via an interface.
func (v *Component) GetComponentType() TelemetryComponentType { return v.ComponentType }

// GetComponentInstanceId returns Component.ComponentInstanceId, and is useful for accessing the field via an interface.
func (v *Component) GetComponentInstanceId() string { return v.ComponentInstanceId }

// GetContextId returns Component.ContextId, and is useful for accessing the field via an interface.
func (v *Component) GetContextId() string { return v.ContextId }

// GetVersion returns Component.Version, and is useful for accessing the field via an interface.
func (v *Component) GetVersion() string { return v.Version }

// GetCloudClientId returns Component.CloudClientId, and is useful for accessing the field via an interface.
func (v *Component) GetCloudClientId() string { return v.CloudClientId }

type Error struct {
	Message    *string          `json:"message"`
	ErrorClass *string          `json:"errorClass"`
	Cause      *Error           `json:"cause"`
	Stack      []*StackFrame    `json:"stack"`
	Metadata   []*MetadataEntry `json:"metadata"`
}

// GetMessage returns Error.Message, and is useful for accessing the field via an interface.
func (v *Error) GetMessage() *string { return v.Message }

// GetErrorClass returns Error.ErrorClass, and is useful for accessing the field via an interface.
func (v *Error) GetErrorClass() *string { return v.ErrorClass }

// GetCause returns Error.Cause, and is useful for accessing the field via an interface.
func (v *Error) GetCause() *Error { return v.Cause }

// GetStack returns Error.Stack, and is useful for accessing the field via an interface.
func (v *Error) GetStack() []*StackFrame { return v.Stack }

// GetMetadata returns Error.Metadata, and is useful for accessing the field via an interface.
func (v *Error) GetMetadata() []*MetadataEntry { return v.Metadata }

type EventType string

const (
	EventTypeIntentsDeleted              EventType = "INTENTS_DELETED"
	EventTypeIntentsApplied              EventType = "INTENTS_APPLIED"
	EventTypeIntentsAppliedKafka         EventType = "INTENTS_APPLIED_KAFKA"
	EventTypeIntentsAppliedHttp          EventType = "INTENTS_APPLIED_HTTP"
	EventTypeIntentsAppliedDatabase      EventType = "INTENTS_APPLIED_DATABASE"
	EventTypeIntentsAppliedInternet      EventType = "INTENTS_APPLIED_INTERNET"
	EventTypeIntentsDiscovered           EventType = "INTENTS_DISCOVERED"
	EventTypeIntentsDiscoveredSocketScan EventType = "INTENTS_DISCOVERED_SOCKET_SCAN"
	EventTypeIntentsDiscoveredCapture    EventType = "INTENTS_DISCOVERED_CAPTURE"
	EventTypeIntentsDiscoveredKafka      EventType = "INTENTS_DISCOVERED_KAFKA"
	EventTypeIntentsDiscoveredIstio      EventType = "INTENTS_DISCOVERED_ISTIO"
	EventTypeIntentsDiscoveredTcp        EventType = "INTENTS_DISCOVERED_TCP"
	EventTypeMapperExport                EventType = "MAPPER_EXPORT"
	EventTypeMapperVisualize             EventType = "MAPPER_VISUALIZE"
	EventTypeKafkaServerConfigApplied    EventType = "KAFKA_SERVER_CONFIG_APPLIED"
	EventTypeKafkaServerConfigDeleted    EventType = "KAFKA_SERVER_CONFIG_DELETED"
	EventTypeNetworkPoliciesCreated      EventType = "NETWORK_POLICIES_CREATED"
	EventTypeNetworkPoliciesDeleted      EventType = "NETWORK_POLICIES_DELETED"
	EventTypeKafkaAclsCreated            EventType = "KAFKA_ACLS_CREATED"
	EventTypeKafkaAclsDeleted            EventType = "KAFKA_ACLS_DELETED"
	EventTypeIstioPoliciesCreated        EventType = "ISTIO_POLICIES_CREATED"
	EventTypeIstioPoliciesDeleted        EventType = "ISTIO_POLICIES_DELETED"
	EventTypeStarted                     EventType = "STARTED"
	EventTypeServiceDiscovered           EventType = "SERVICE_DISCOVERED"
	EventTypeNamespaceDiscovered         EventType = "NAMESPACE_DISCOVERED"
	EventTypeProtectedServiceApplied     EventType = "PROTECTED_SERVICE_APPLIED"
	EventTypeProtectedServiceDeleted     EventType = "PROTECTED_SERVICE_DELETED"
	EventTypeActive                      EventType = "ACTIVE"
)

type MetadataEntry struct {
	Key   *string `json:"key"`
	Value *string `json:"value"`
}

// GetKey returns MetadataEntry.Key, and is useful for accessing the field via an interface.
func (v *MetadataEntry) GetKey() *string { return v.Key }

// GetValue returns MetadataEntry.Value, and is useful for accessing the field via an interface.
func (v *MetadataEntry) GetValue() *string { return v.Value }

// ReportErrorsResponse is returned by ReportErrors on success.
type ReportErrorsResponse struct {
	SendErrors *bool `json:"sendErrors"`
}

// GetSendErrors returns ReportErrorsResponse.SendErrors, and is useful for accessing the field via an interface.
func (v *ReportErrorsResponse) GetSendErrors() *bool { return v.SendErrors }

// SendTelemetriesResponse is returned by SendTelemetries on success.
type SendTelemetriesResponse struct {
	SendTelemetries bool `json:"sendTelemetries"`
}

// GetSendTelemetries returns SendTelemetriesResponse.SendTelemetries, and is useful for accessing the field via an interface.
func (v *SendTelemetriesResponse) GetSendTelemetries() bool { return v.SendTelemetries }

type StackFrame struct {
	File       *string `json:"file"`
	LineNumber *int    `json:"lineNumber"`
	Name       *string `json:"name"`
	Package    *string `json:"package"`
}

// GetFile returns StackFrame.File, and is useful for accessing the field via an interface.
func (v *StackFrame) GetFile() *string { return v.File }

// GetLineNumber returns StackFrame.LineNumber, and is useful for accessing the field via an interface.
func (v *StackFrame) GetLineNumber() *int { return v.LineNumber }

// GetName returns StackFrame.Name, and is useful for accessing the field via an interface.
func (v *StackFrame) GetName() *string { return v.Name }

// GetPackage returns StackFrame.Package, and is useful for accessing the field via an interface.
func (v *StackFrame) GetPackage() *string { return v.Package }

type TelemetryComponentType string

const (
	TelemetryComponentTypeIntentsOperator     TelemetryComponentType = "INTENTS_OPERATOR"
	TelemetryComponentTypeCredentialsOperator TelemetryComponentType = "CREDENTIALS_OPERATOR"
	TelemetryComponentTypeNetworkMapper       TelemetryComponentType = "NETWORK_MAPPER"
	TelemetryComponentTypeCli                 TelemetryComponentType = "CLI"
)

type TelemetryData struct {
	EventType EventType `json:"eventType"`
	Count     int       `json:"count"`
}

// GetEventType returns TelemetryData.EventType, and is useful for accessing the field via an interface.
func (v *TelemetryData) GetEventType() EventType { return v.EventType }

// GetCount returns TelemetryData.Count, and is useful for accessing the field via an interface.
func (v *TelemetryData) GetCount() int { return v.Count }

type TelemetryInput struct {
	Component Component     `json:"component"`
	Data      TelemetryData `json:"data"`
}

// GetComponent returns TelemetryInput.Component, and is useful for accessing the field via an interface.
func (v *TelemetryInput) GetComponent() Component { return v.Component }

// GetData returns TelemetryInput.Data, and is useful for accessing the field via an interface.
func (v *TelemetryInput) GetData() TelemetryData { return v.Data }

// __ReportErrorsInput is used internally by genqlient
type __ReportErrorsInput struct {
	Component *Component `json:"component"`
	Errors    []*Error   `json:"errors"`
}

// GetComponent returns __ReportErrorsInput.Component, and is useful for accessing the field via an interface.
func (v *__ReportErrorsInput) GetComponent() *Component { return v.Component }

// GetErrors returns __ReportErrorsInput.Errors, and is useful for accessing the field via an interface.
func (v *__ReportErrorsInput) GetErrors() []*Error { return v.Errors }

// __SendTelemetriesInput is used internally by genqlient
type __SendTelemetriesInput struct {
	Telemetries []TelemetryInput `json:"telemetries"`
}

// GetTelemetries returns __SendTelemetriesInput.Telemetries, and is useful for accessing the field via an interface.
func (v *__SendTelemetriesInput) GetTelemetries() []TelemetryInput { return v.Telemetries }

// The query or mutation executed by ReportErrors.
const ReportErrors_Operation = `
mutation ReportErrors ($component: Component!, $errors: [Error!]!) {
	sendErrors(component: $component, errors: $errors)
}
`

func ReportErrors(
	ctx_ context.Context,
	client_ graphql.Client,
	component *Component,
	errors []*Error,
) (*ReportErrorsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReportErrors",
		Query:  ReportErrors_Operation,
		Variables: &__ReportErrorsInput{
			Component: component,
			Errors:    errors,
		},
	}
	var err_ error

	var data_ ReportErrorsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SendTelemetries.
const SendTelemetries_Operation = `
mutation SendTelemetries ($telemetries: [TelemetryInput!]!) {
	sendTelemetries(telemetries: $telemetries)
}
`

func SendTelemetries(
	ctx_ context.Context,
	client_ graphql.Client,
	telemetries []TelemetryInput,
) (*SendTelemetriesResponse, error) {
	req_ := &graphql.Request{
		OpName: "SendTelemetries",
		Query:  SendTelemetries_Operation,
		Variables: &__SendTelemetriesInput{
			Telemetries: telemetries,
		},
	}
	var err_ error

	var data_ SendTelemetriesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
