// Code generated by MockGen. DO NOT EDIT.
// Source: ../operator_cloud_client/cloud_api.go

// Package otterizecloudmocks is a generated GoMock package.
package otterizecloudmocks

import (
	context "context"
	reflect "reflect"

	graphqlclient "github.com/otterize/intents-operator/src/shared/otterizecloud/graphqlclient"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudClient is a mock of CloudClient interface.
type MockCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudClientMockRecorder
}

// MockCloudClientMockRecorder is the mock recorder for MockCloudClient.
type MockCloudClientMockRecorder struct {
	mock *MockCloudClient
}

// NewMockCloudClient creates a new mock instance.
func NewMockCloudClient(ctrl *gomock.Controller) *MockCloudClient {
	mock := &MockCloudClient{ctrl: ctrl}
	mock.recorder = &MockCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudClient) EXPECT() *MockCloudClientMockRecorder {
	return m.recorder
}

// ReportAppliedIntents mocks base method.
func (m *MockCloudClient) ReportAppliedIntents(ctx context.Context, namespace *string, intents []*graphqlclient.IntentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAppliedIntents", ctx, namespace, intents)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportAppliedIntents indicates an expected call of ReportAppliedIntents.
func (mr *MockCloudClientMockRecorder) ReportAppliedIntents(ctx, namespace, intents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAppliedIntents", reflect.TypeOf((*MockCloudClient)(nil).ReportAppliedIntents), ctx, namespace, intents)
}

// ReportClientIntentStatuses mocks base method.
func (m *MockCloudClient) ReportClientIntentStatuses(ctx context.Context, statuses []graphqlclient.ClientIntentStatusInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportClientIntentStatuses", ctx, statuses)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportClientIntentStatuses indicates an expected call of ReportClientIntentStatuses.
func (mr *MockCloudClientMockRecorder) ReportClientIntentStatuses(ctx, statuses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportClientIntentStatuses", reflect.TypeOf((*MockCloudClient)(nil).ReportClientIntentStatuses), ctx, statuses)
}

// ReportComponentStatus mocks base method.
func (m *MockCloudClient) ReportComponentStatus(ctx context.Context, component graphqlclient.ComponentType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportComponentStatus", ctx, component)
}

// ReportComponentStatus indicates an expected call of ReportComponentStatus.
func (mr *MockCloudClientMockRecorder) ReportComponentStatus(ctx, component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportComponentStatus", reflect.TypeOf((*MockCloudClient)(nil).ReportComponentStatus), ctx, component)
}

// ReportExternallyAccessibleServices mocks base method.
func (m *MockCloudClient) ReportExternallyAccessibleServices(ctx context.Context, namespace string, services []graphqlclient.ExternallyAccessibleServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportExternallyAccessibleServices", ctx, namespace, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportExternallyAccessibleServices indicates an expected call of ReportExternallyAccessibleServices.
func (mr *MockCloudClientMockRecorder) ReportExternallyAccessibleServices(ctx, namespace, services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExternallyAccessibleServices", reflect.TypeOf((*MockCloudClient)(nil).ReportExternallyAccessibleServices), ctx, namespace, services)
}

// ReportIntentEvents mocks base method.
func (m *MockCloudClient) ReportIntentEvents(ctx context.Context, events []graphqlclient.ClientIntentEventInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportIntentEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportIntentEvents indicates an expected call of ReportIntentEvents.
func (mr *MockCloudClientMockRecorder) ReportIntentEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportIntentEvents", reflect.TypeOf((*MockCloudClient)(nil).ReportIntentEvents), ctx, events)
}

// ReportIntentsOperatorConfiguration mocks base method.
func (m *MockCloudClient) ReportIntentsOperatorConfiguration(ctx context.Context, config graphqlclient.IntentsOperatorConfigurationInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportIntentsOperatorConfiguration", ctx, config)
}

// ReportIntentsOperatorConfiguration indicates an expected call of ReportIntentsOperatorConfiguration.
func (mr *MockCloudClientMockRecorder) ReportIntentsOperatorConfiguration(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportIntentsOperatorConfiguration", reflect.TypeOf((*MockCloudClient)(nil).ReportIntentsOperatorConfiguration), ctx, config)
}

// ReportKafkaServerConfig mocks base method.
func (m *MockCloudClient) ReportKafkaServerConfig(ctx context.Context, namespace string, servers []graphqlclient.KafkaServerConfigInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportKafkaServerConfig", ctx, namespace, servers)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportKafkaServerConfig indicates an expected call of ReportKafkaServerConfig.
func (mr *MockCloudClientMockRecorder) ReportKafkaServerConfig(ctx, namespace, servers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportKafkaServerConfig", reflect.TypeOf((*MockCloudClient)(nil).ReportKafkaServerConfig), ctx, namespace, servers)
}

// ReportNetworkPolicies mocks base method.
func (m *MockCloudClient) ReportNetworkPolicies(ctx context.Context, namespace string, policies []graphqlclient.NetworkPolicyInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportNetworkPolicies", ctx, namespace, policies)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportNetworkPolicies indicates an expected call of ReportNetworkPolicies.
func (mr *MockCloudClientMockRecorder) ReportNetworkPolicies(ctx, namespace, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportNetworkPolicies", reflect.TypeOf((*MockCloudClient)(nil).ReportNetworkPolicies), ctx, namespace, policies)
}

// ReportProtectedServices mocks base method.
func (m *MockCloudClient) ReportProtectedServices(ctx context.Context, namespace string, protectedServices []graphqlclient.ProtectedServiceInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportProtectedServices", ctx, namespace, protectedServices)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportProtectedServices indicates an expected call of ReportProtectedServices.
func (mr *MockCloudClientMockRecorder) ReportProtectedServices(ctx, namespace, protectedServices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportProtectedServices", reflect.TypeOf((*MockCloudClient)(nil).ReportProtectedServices), ctx, namespace, protectedServices)
}
