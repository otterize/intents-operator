// Code generated by MockGen. DO NOT EDIT.
// Source: ../../operator/controllers/intents_reconcilers/otterizecloud/cloud_api.go

// Package otterizecloudmocks is a generated GoMock package.
package otterizecloudmocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/otterize/intents-operator/src/operator/api/v1alpha1"
	graphqlclient "github.com/otterize/intents-operator/src/shared/otterizecloud/graphqlclient"
)

// MockCloudClient is a mock of CloudClient interface.
type MockCloudClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudClientMockRecorder
}

// MockCloudClientMockRecorder is the mock recorder for MockCloudClient.
type MockCloudClientMockRecorder struct {
	mock *MockCloudClient
}

// NewMockCloudClient creates a new mock instance.
func NewMockCloudClient(ctrl *gomock.Controller) *MockCloudClient {
	mock := &MockCloudClient{ctrl: ctrl}
	mock.recorder = &MockCloudClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudClient) EXPECT() *MockCloudClientMockRecorder {
	return m.recorder
}

// ReportAppliedIntents mocks base method.
func (m *MockCloudClient) ReportAppliedIntents(ctx context.Context, namespace string, clientIntentsList v1alpha1.ClientIntentsList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportAppliedIntents", ctx, namespace, clientIntentsList)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportAppliedIntents indicates an expected call of ReportAppliedIntents.
func (mr *MockCloudClientMockRecorder) ReportAppliedIntents(ctx, namespace, clientIntentsList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportAppliedIntents", reflect.TypeOf((*MockCloudClient)(nil).ReportAppliedIntents), ctx, namespace, clientIntentsList)
}

// ReportIntentsOperatorConfiguration mocks base method.
func (m *MockCloudClient) ReportIntentsOperatorConfiguration(ctx context.Context, enableEnforcement bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportIntentsOperatorConfiguration", ctx, enableEnforcement)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportIntentsOperatorConfiguration indicates an expected call of ReportIntentsOperatorConfiguration.
func (mr *MockCloudClientMockRecorder) ReportIntentsOperatorConfiguration(ctx, enableEnforcement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportIntentsOperatorConfiguration", reflect.TypeOf((*MockCloudClient)(nil).ReportIntentsOperatorConfiguration), ctx, enableEnforcement)
}

// ReportKafkaServerConfig mocks base method.
func (m *MockCloudClient) ReportKafkaServerConfig(ctx context.Context, server graphqlclient.KafkaServerConfigInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportKafkaServerConfig", ctx, server)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReportKafkaServerConfig indicates an expected call of ReportKafkaServerConfig.
func (mr *MockCloudClientMockRecorder) ReportKafkaServerConfig(ctx, server interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportKafkaServerConfig", reflect.TypeOf((*MockCloudClient)(nil).ReportKafkaServerConfig), ctx, server)
}
