// Code generated by MockGen. DO NOT EDIT.
// Source: ./networkpolicy/reconciler.go

// Package intentsreconcilersmocks is a generated GoMock package.
package intentsreconcilersmocks

import (
	context "context"
	reflect "reflect"

	effectivepolicy "github.com/otterize/intents-operator/src/operator/effectivepolicy"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	record "k8s.io/client-go/tools/record"
)

// MockEgressRuleBuilder is a mock of EgressRuleBuilder interface.
type MockEgressRuleBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockEgressRuleBuilderMockRecorder
}

// MockEgressRuleBuilderMockRecorder is the mock recorder for MockEgressRuleBuilder.
type MockEgressRuleBuilderMockRecorder struct {
	mock *MockEgressRuleBuilder
}

// NewMockEgressRuleBuilder creates a new mock instance.
func NewMockEgressRuleBuilder(ctrl *gomock.Controller) *MockEgressRuleBuilder {
	mock := &MockEgressRuleBuilder{ctrl: ctrl}
	mock.recorder = &MockEgressRuleBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEgressRuleBuilder) EXPECT() *MockEgressRuleBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockEgressRuleBuilder) Build(ctx context.Context, ep effectivepolicy.ServiceEffectivePolicy) ([]v1.NetworkPolicyEgressRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, ep)
	ret0, _ := ret[0].([]v1.NetworkPolicyEgressRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockEgressRuleBuilderMockRecorder) Build(ctx, ep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockEgressRuleBuilder)(nil).Build), ctx, ep)
}

// InjectRecorder mocks base method.
func (m *MockEgressRuleBuilder) InjectRecorder(recorder record.EventRecorder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectRecorder", recorder)
}

// InjectRecorder indicates an expected call of InjectRecorder.
func (mr *MockEgressRuleBuilderMockRecorder) InjectRecorder(recorder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRecorder", reflect.TypeOf((*MockEgressRuleBuilder)(nil).InjectRecorder), recorder)
}

// MockIngressRuleBuilder is a mock of IngressRuleBuilder interface.
type MockIngressRuleBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockIngressRuleBuilderMockRecorder
}

// MockIngressRuleBuilderMockRecorder is the mock recorder for MockIngressRuleBuilder.
type MockIngressRuleBuilderMockRecorder struct {
	mock *MockIngressRuleBuilder
}

// NewMockIngressRuleBuilder creates a new mock instance.
func NewMockIngressRuleBuilder(ctrl *gomock.Controller) *MockIngressRuleBuilder {
	mock := &MockIngressRuleBuilder{ctrl: ctrl}
	mock.recorder = &MockIngressRuleBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIngressRuleBuilder) EXPECT() *MockIngressRuleBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockIngressRuleBuilder) Build(ctx context.Context, ep effectivepolicy.ServiceEffectivePolicy) ([]v1.NetworkPolicyIngressRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, ep)
	ret0, _ := ret[0].([]v1.NetworkPolicyIngressRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockIngressRuleBuilderMockRecorder) Build(ctx, ep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockIngressRuleBuilder)(nil).Build), ctx, ep)
}

// InjectRecorder mocks base method.
func (m *MockIngressRuleBuilder) InjectRecorder(recorder record.EventRecorder) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InjectRecorder", recorder)
}

// InjectRecorder indicates an expected call of InjectRecorder.
func (mr *MockIngressRuleBuilderMockRecorder) InjectRecorder(recorder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectRecorder", reflect.TypeOf((*MockIngressRuleBuilder)(nil).InjectRecorder), recorder)
}

// MockexternalNetpolHandler is a mock of externalNetpolHandler interface.
type MockexternalNetpolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockexternalNetpolHandlerMockRecorder
}

// MockexternalNetpolHandlerMockRecorder is the mock recorder for MockexternalNetpolHandler.
type MockexternalNetpolHandlerMockRecorder struct {
	mock *MockexternalNetpolHandler
}

// NewMockexternalNetpolHandler creates a new mock instance.
func NewMockexternalNetpolHandler(ctrl *gomock.Controller) *MockexternalNetpolHandler {
	mock := &MockexternalNetpolHandler{ctrl: ctrl}
	mock.recorder = &MockexternalNetpolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexternalNetpolHandler) EXPECT() *MockexternalNetpolHandlerMockRecorder {
	return m.recorder
}

// HandleBeforeAccessPolicyRemoval mocks base method.
func (m *MockexternalNetpolHandler) HandleBeforeAccessPolicyRemoval(ctx context.Context, accessPolicy *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBeforeAccessPolicyRemoval", ctx, accessPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBeforeAccessPolicyRemoval indicates an expected call of HandleBeforeAccessPolicyRemoval.
func (mr *MockexternalNetpolHandlerMockRecorder) HandleBeforeAccessPolicyRemoval(ctx, accessPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBeforeAccessPolicyRemoval", reflect.TypeOf((*MockexternalNetpolHandler)(nil).HandleBeforeAccessPolicyRemoval), ctx, accessPolicy)
}

// HandlePodsByLabelSelector mocks base method.
func (m *MockexternalNetpolHandler) HandlePodsByLabelSelector(ctx context.Context, namespace string, labelSelector labels.Selector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePodsByLabelSelector", ctx, namespace, labelSelector)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePodsByLabelSelector indicates an expected call of HandlePodsByLabelSelector.
func (mr *MockexternalNetpolHandlerMockRecorder) HandlePodsByLabelSelector(ctx, namespace, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePodsByLabelSelector", reflect.TypeOf((*MockexternalNetpolHandler)(nil).HandlePodsByLabelSelector), ctx, namespace, labelSelector)
}
