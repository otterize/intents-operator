// Code generated by MockGen. DO NOT EDIT.
// Source: ./network_policy.go

// Package intentsreconcilersmocks is a generated GoMock package.
package intentsreconcilersmocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockexternalNetpolHandler is a mock of externalNetpolHandler interface.
type MockexternalNetpolHandler struct {
	ctrl     *gomock.Controller
	recorder *MockexternalNetpolHandlerMockRecorder
}

// MockexternalNetpolHandlerMockRecorder is the mock recorder for MockexternalNetpolHandler.
type MockexternalNetpolHandlerMockRecorder struct {
	mock *MockexternalNetpolHandler
}

// NewMockexternalNetpolHandler creates a new mock instance.
func NewMockexternalNetpolHandler(ctrl *gomock.Controller) *MockexternalNetpolHandler {
	mock := &MockexternalNetpolHandler{ctrl: ctrl}
	mock.recorder = &MockexternalNetpolHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexternalNetpolHandler) EXPECT() *MockexternalNetpolHandlerMockRecorder {
	return m.recorder
}

// HandleBeforeAccessPolicyRemoval mocks base method.
func (m *MockexternalNetpolHandler) HandleBeforeAccessPolicyRemoval(ctx context.Context, accessPolicy *v1.NetworkPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBeforeAccessPolicyRemoval", ctx, accessPolicy)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBeforeAccessPolicyRemoval indicates an expected call of HandleBeforeAccessPolicyRemoval.
func (mr *MockexternalNetpolHandlerMockRecorder) HandleBeforeAccessPolicyRemoval(ctx, accessPolicy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBeforeAccessPolicyRemoval", reflect.TypeOf((*MockexternalNetpolHandler)(nil).HandleBeforeAccessPolicyRemoval), ctx, accessPolicy)
}

// HandlePodsByLabelSelector mocks base method.
func (m *MockexternalNetpolHandler) HandlePodsByLabelSelector(ctx context.Context, namespace string, labelSelector labels.Selector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePodsByLabelSelector", ctx, namespace, labelSelector)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePodsByLabelSelector indicates an expected call of HandlePodsByLabelSelector.
func (mr *MockexternalNetpolHandlerMockRecorder) HandlePodsByLabelSelector(ctx, namespace, labelSelector interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePodsByLabelSelector", reflect.TypeOf((*MockexternalNetpolHandler)(nil).HandlePodsByLabelSelector), ctx, namespace, labelSelector)
}
