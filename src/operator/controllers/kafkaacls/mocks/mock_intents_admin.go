// Code generated by MockGen. DO NOT EDIT.
// Source: intents_admin.go

// Package kafkaaclsmocks is a generated GoMock package.
package kafkaaclsmocks

import (
	reflect "reflect"

	v2alpha1 "github.com/otterize/intents-operator/src/operator/api/v2alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockKafkaIntentsAdmin is a mock of KafkaIntentsAdmin interface.
type MockKafkaIntentsAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaIntentsAdminMockRecorder
}

// MockKafkaIntentsAdminMockRecorder is the mock recorder for MockKafkaIntentsAdmin.
type MockKafkaIntentsAdminMockRecorder struct {
	mock *MockKafkaIntentsAdmin
}

// NewMockKafkaIntentsAdmin creates a new mock instance.
func NewMockKafkaIntentsAdmin(ctrl *gomock.Controller) *MockKafkaIntentsAdmin {
	mock := &MockKafkaIntentsAdmin{ctrl: ctrl}
	mock.recorder = &MockKafkaIntentsAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaIntentsAdmin) EXPECT() *MockKafkaIntentsAdminMockRecorder {
	return m.recorder
}

// ApplyClientIntents mocks base method.
func (m *MockKafkaIntentsAdmin) ApplyClientIntents(clientName, clientNamespace string, intents []v2alpha1.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyClientIntents", clientName, clientNamespace, intents)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyClientIntents indicates an expected call of ApplyClientIntents.
func (mr *MockKafkaIntentsAdminMockRecorder) ApplyClientIntents(clientName, clientNamespace, intents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyClientIntents", reflect.TypeOf((*MockKafkaIntentsAdmin)(nil).ApplyClientIntents), clientName, clientNamespace, intents)
}

// ApplyServerTopicsConf mocks base method.
func (m *MockKafkaIntentsAdmin) ApplyServerTopicsConf(topicsConf []v2alpha1.TopicConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyServerTopicsConf", topicsConf)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyServerTopicsConf indicates an expected call of ApplyServerTopicsConf.
func (mr *MockKafkaIntentsAdminMockRecorder) ApplyServerTopicsConf(topicsConf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyServerTopicsConf", reflect.TypeOf((*MockKafkaIntentsAdmin)(nil).ApplyServerTopicsConf), topicsConf)
}

// Close mocks base method.
func (m *MockKafkaIntentsAdmin) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKafkaIntentsAdminMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaIntentsAdmin)(nil).Close))
}

// RemoveClientIntents mocks base method.
func (m *MockKafkaIntentsAdmin) RemoveClientIntents(clientName, clientNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveClientIntents", clientName, clientNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveClientIntents indicates an expected call of RemoveClientIntents.
func (mr *MockKafkaIntentsAdminMockRecorder) RemoveClientIntents(clientName, clientNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientIntents", reflect.TypeOf((*MockKafkaIntentsAdmin)(nil).RemoveClientIntents), clientName, clientNamespace)
}

// RemoveServerIntents mocks base method.
func (m *MockKafkaIntentsAdmin) RemoveServerIntents(topicsConf []v2alpha1.TopicConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServerIntents", topicsConf)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveServerIntents indicates an expected call of RemoveServerIntents.
func (mr *MockKafkaIntentsAdminMockRecorder) RemoveServerIntents(topicsConf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServerIntents", reflect.TypeOf((*MockKafkaIntentsAdmin)(nil).RemoveServerIntents), topicsConf)
}
