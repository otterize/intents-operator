apiVersion: v1
kind: Namespace
metadata:
  name: otterize-tutorial-npol
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-server-deployment
  namespace: otterize-tutorial-npol
spec:
  replicas: 1
  selector:
    matchLabels:
      app: simple-server
  template:
    metadata:
      labels:
        app: simple-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "7000"
    spec:
      containers:
        - name: simple-server
          image: python:3.9-slim
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "-c", "pip install flask requests prometheus_client && python /server.py" ]
          ports:
            - containerPort: 8080
            - containerPort: 7000
          volumeMounts:
            - name: server-script
              mountPath: /server.py
              subPath: server.py
      volumes:
        - name: server-script
          configMap:
            name: server-script-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: simple-server-service
  namespace: otterize-tutorial-npol
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "7000"
spec:
  selector:
    app: simple-server
  ports:
    - protocol: TCP
      name: connection
      port: 80
      targetPort: 8080
    - protocol: TCP
      name: metrics
      port: 7000
      targetPort: 7000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: otterize-tutorial-npol
spec:
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
        - name: client
          image: alpine/curl
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do echo \"Calling server...\"; if ! timeout 2 curl -si http://simple-server-service:80/?text=client 2>/dev/null; then echo \"curl timed out\"; fi; sleep 2; done" ]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-other
  namespace: otterize-tutorial-npol
spec:
  selector:
    matchLabels:
      app: client-other
  template:
    metadata:
      labels:
        app: client-other
    spec:
      containers:
        - name: client-other
          image: alpine/curl
          command: [ "/bin/sh", "-c", "--" ]
          args: [ "while true; do echo \"Calling server...\"; if ! timeout 2 curl -si http://simple-server-service:80/?text=client-other 2>/dev/null; then echo \"curl timed out\"; fi; sleep 2; done" ]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: server-script-configmap
  namespace: otterize-tutorial-npol
data:
  server.py: |
    from flask import Flask, request
    from prometheus_client import start_http_server, Summary, Counter
    
    app = Flask(__name__)
  
    REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')
    REQUEST_COUNT = Counter('server_requests_count', 'Total number of requests made to the server')
  
    @app.route('/')
    @REQUEST_TIME.time()  # Track the time spent on this route
    def index():
      REQUEST_COUNT.inc()
      text = request.args.get('text', 'Hello, world!')
      return f'You entered: {text}'

    if __name__ == '__main__':
      # Start Prometheus metrics server on port 7000
      start_http_server(7000)
      app.run(host='0.0.0.0', port=8080)
---