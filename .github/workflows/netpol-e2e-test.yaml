name: E2E Test # this test is based on this tutorial: https://docs.otterize.com/quick-tutorials/k8s-network-policies
on:
  workflow_call: # To support triggering from another workflow (build.yaml)
    # When triggering a workflow from another workflow the triggered workflow does not have access to any secrets,
    # and they must be passed from the caller
    secrets:
      OTTERIZEBOT_GITHUB_TOKEN:
        required: true
      B64_GCLOUD_SERVICE_ACCOUNT_JSON:
        required: true

    inputs:
      operator-tag:
        required: true
        type: string
      watcher-tag:
        required: true
        type: string


env:
  REGISTRY: us-central1-docker.pkg.dev/main-383408/otterize


jobs:
  e2e-test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.OTTERIZEBOT_GITHUB_TOKEN }} # required for checking out submodules

      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: _json_key_base64
          password: ${{ secrets.B64_GCLOUD_SERVICE_ACCOUNT_JSON}}

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          start-args: "--network-plugin=cni --cni=calico"

      - name: Wait for Calico startup
        run: |-
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-node --for condition=Ready --timeout=90s
          kubectl wait pods -n kube-system -l k8s-app=calico-kube-controllers --for condition=Ready --timeout=90s

      - name: Install Otterize
        run: |-
          docker pull ${{ env.REGISTRY }}/intents-operator:${{ inputs.operator-tag }}
          minikube image load ${{ env.REGISTRY }}/intents-operator:${{ inputs.operator-tag }}
          docker pull ${{ env.REGISTRY }}/watcher:${{ inputs.watcher-tag }}
          minikube image load  ${{ env.REGISTRY }}/watcher:${{ inputs.watcher-tag }}
          
          OPERATOR_FLAGS="--set-string intentsOperator.operator.repository=${{ env.REGISTRY }} --set-string intentsOperator.operator.image=intents-operator --set-string intentsOperator.operator.tag=${{ inputs.operator-tag }} --set-string intentsOperator.operator.pullPolicy=Never"
          WATCHER_FLAGS="--set-string intentsOperator.watcher.repository=${{ env.REGISTRY }} --set-string intentsOperator.watcher.image=watcher --set-string intentsOperator.watcher.tag=${{ inputs.watcher-tag }} --set-string intentsOperator.watcher.pullPolicy=Never"
          helm dep up ./helm-charts/otterize-kubernetes
          helm install otterize ./helm-charts/otterize-kubernetes -n otterize-system --create-namespace $OPERATOR_FLAGS $WATCHER_FLAGS


      - name: Deploy Tutorial services
        run: |-
          kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/all.yaml

      - name: Wait for Otterize
        run: |-
          kubectl wait pods -n otterize-system -l app=intents-operator --for condition=Ready --timeout=360s
          kubectl wait pods -n otterize-system -l app=otterize-watcher --for condition=Ready --timeout=360s


      - name: Wait for Tutorial services
        run: |-
          kubectl wait pods -n otterize-tutorial-npol -l app=client --for condition=Ready --timeout=180s
          kubectl wait pods -n otterize-tutorial-npol -l app=client-other --for condition=Ready --timeout=180s
          kubectl wait pods -n otterize-tutorial-npol -l app=server --for condition=Ready --timeout=180s

      - name: Before apply intents
        run: |-
          CLI1_POD=`kubectl get pod --selector app=client -n otterize-tutorial-npol -o json | jq -r ".items[0].metadata.name"`
          CLI2_POD=`kubectl get pod --selector app=client-other -n otterize-tutorial-npol -o json | jq -r ".items[0].metadata.name"`
          echo Client: $CLI1_POD      client_other: $CLI2_POD
          
          # using 14 because the log repeat itself every 14 lines
          echo check client log
          kubectl logs --tail 14 -n otterize-tutorial-npol $CLI1_POD | grep "Hi, I am the server, you called, may I help you?"
          
          echo check client other log
          kubectl logs --tail 14 -n otterize-tutorial-npol $CLI2_POD | grep "Hi, I am the server, you called, may I help you?"

      - name: Apply intents and test connectivity
        run: |-
          CLI1_POD=`kubectl get pod --selector app=client -n otterize-tutorial-npol -o json | jq -r ".items[0].metadata.name"`
          CLI2_POD=`kubectl get pod --selector app=client-other -n otterize-tutorial-npol -o json | jq -r ".items[0].metadata.name"`          
          echo Client: $CLI1_POD      client_other: $CLI2_POD
          
          kubectl apply -f https://docs.otterize.com/code-examples/automate-network-policies/intents.yaml
          sleep 10
          
          # should work because there is an applied intent
          echo check client log
          kubectl logs --tail 14 -n otterize-tutorial-npol $CLI1_POD | grep "Hi, I am the server, you called, may I help you?"
          
          # should be blocked (using 3 because the log should repeat itself every 3 lines)
          echo check client other log
          kubectl logs --tail 3 -n otterize-tutorial-npol $CLI2_POD | grep "curl timed out"
          
      

      
